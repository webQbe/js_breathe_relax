/* Import Font */
@import url('https://fonts.googleapis.com/css?family=Montserrat&display=swap');

* {
    box-sizing: border-box;
}

body{
    background: #224941 url('./img/bg.jpg') no-repeat center center/cover;
    color: #FFF;
    font-family: 'Montserrat', sans-serif;
    min-height: 100vh;
    overflow: hidden;
    display: flex;
    flex-direction: column;
    align-items: center;
    margin: 0;
}

/* Style Container for Solid & Gradient Circles */
.container{
    display: flex;
    align-items: center;
    justify-content: center;
    height: 300px;
    width: 300px;
    margin: auto; /* Move to middle */
    position: relative;
    transform: scale(1);

}

/* Style Gradient Circle */
.gradient-circle{
    background: conic-gradient(
          /* background: conic-gradient(...) 
            applies a gradient that radiates from the center of the circle outward, 
            following the angles around the circle in a clockwise direction. */

        #55b7a4 0%, /* Starts with a teal-green color at the top (0%). */
        #4ca493 40%, /* Gradually shifts to a slightly darker green at 40%. */
        #fff 40%, /* Changes abruptly to white at 40%. */
        #fff 60%, /* Keeps the white section until 60%. */
        #336d62 60%, /* At 60%, it shifts to a dark green. */
        #2a5b52 100% /* Ends with an even darker green at 100%. */
    );

    /* This styling gives the circle a layered, 
       radial look with distinct color segments, 
       making it visually appear as though it has bands or 
       sections radiating out from the center. */

    height: 320px; width: 320px;/* Larger than Solid Circle */
    position: absolute;
    top: -10px; left: -10px;  z-index: -2;   /* Move it directly behind Solid Circle */
    border-radius: 50%; /* Make it a Circle */
    
}

/* Style Solid Circle */
.circle{
    background-color: #010f1c;
    height: 100%; width: 100%; /* Set Full Height & Width (300px) of Container */
    position: absolute;
    top: 0; left: 0; /* Move to middle of Gradient Circle */
    z-index: -1; /* Place on top of Gradient Circle */
    border-radius: 50%; /* Make it a Circle */ 
}


/* Style Container for Pointer */
.pointer-container{
    position: absolute;
    top: -40px; /* Starts from Outside of Circles */
    left: 140px; /* From Solid Circle Border */
    width: 20px; /* Pointer Width */
    height: 190px; /* Ends at Center of Circles */
    animation: rotate 7.5s linear forwards infinite; /* Add animation */

    /*  rotate: Name of the animation.
        7.5s: Animation will take 7.5 seconds to complete one full cycle.
        linear: Animation proceeds at a constant speed from start to finish, 
                without any acceleration or deceleration.
        forwards: Animation will stay in its final state 
                  (as defined at the end of the @keyframes) after it completes each cycle.
        infinite: Loop indefinitely, so the element will continue to animate continuously 
                  every 7.5 seconds.

    */

    transform-origin: bottom center;

    /* Rotate around bottom-center point instead of spinning around its central point.*/


}

/* Style Pointer */
.pointer{
    background-color: #FFF;
    border-radius: 50%;
    height: 20px;
    width: 20px;
    display: block;
}


/* Add Grow Animation to Container */
.container.grow{

    animation: grow 3s linear forwards;
    /* Unlike rotate element will not continue to animate continuously, 
       when grow ends, shrink starts */
}


/* Add Shrink Animation to Container */
.container.shrink{

    animation: shrink 3s linear forwards;

}



/* Create Pointer Rotation Animation */
@keyframes rotate{

    from{
        transform: rotate(0deg);
    }

    to {
        transform: rotate(360deg);
    }

    /* With this @keyframes, 
       the element will rotate 360 degrees around its center every 7.5 seconds, 
       creating a smooth, endless spinning effect. */
}


/* Create Grow Animation */
@keyframes grow{

    from{
        transform: scale(1); /* Default Scale */
    }

    to {
            transform: scale(1.2);
        }

    /* With this @keyframes, 
       the element will scale from 1 to 1.2 every 6 seconds, 
       creating a smooth, endless scaling effect. */

}



/* Create Shrink Animation */
@keyframes shrink{

    from{
            transform: scale(1.2);
        }

    to {
            transform: scale(1);
        }

    /* With this @keyframes, 
       the element will scale from 1.2 to 1 every 6 seconds, 
       creating a smooth, endless scaling effect. */

}